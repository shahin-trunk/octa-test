services:
  traefik:
    image: traefik:v3.0
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.postgre.address=:5432"
      - "--entrypoints.mongo.address=:27017"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - web
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASICAUTH_USERS}"

  postgresql:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgresql_data:/var/lib/postgresql/data
    networks:
      - internal
    labels:
      - "traefik.tcp.routers.postgresql.entrypoints=postgre"
      - "traefik.tcp.routers.postgresql.service=postgresql"
      - "traefik.tcp.routers.postgresql.tls.certresolver=letsencrypt"
      - "traefik.tcp.routers.postgresql.tls.passthrough=false"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  mongo:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - ./mongo_data:/data/db
    networks:
      - internal
    labels:
      - "traefik.tcp.routers.mongo.entrypoints=mongo"
      - "traefik.tcp.routers.mongo.service=mongo"
      - "traefik.tcp.routers.mongo.tls.certresolver=letsencrypt"
      - "traefik.tcp.routers.mongo.tls.passthrough=false"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  lancedb:
    build: ./lancedb
    image: lancedb/lancedb
    volumes:
      - ./lancedb_data:/data  # Adjust based on documentation
    networks:
      - web
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lancedb.rule=Host(`${LANCEDB_HOST}`)"
      - "traefik.http.routers.lancedb.entrypoints=websecure"
      - "traefik.http.routers.lancedb.tls.certresolver=letsencrypt"
      - "traefik.http.services.lancedb.loadbalancer.server.port=8080"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  qdrant:
    image: qdrant/qdrant
    volumes:
      - ./qdrant_data:/qdrant/data  # Adjust based on documentation
    networks:
      - web
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`${QDRANT_HOST}`)"
      - "traefik.http.routers.qdrant.entrypoints=websecure"
      - "traefik.http.routers.qdrant.tls.certresolver=letsencrypt"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  redis:
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - ./valkey_data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  searxng:
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    networks:
      - web
      - internal
    volumes:
      - ./searxng_config:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOST:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searxng.rule=Host(`${SEARXNG_HOST}`)"
      - "traefik.http.routers.searxng.entrypoints=websecure"
      - "traefik.http.routers.searxng.tls.certresolver=letsencrypt"
      - "traefik.http.services.searxng.loadbalancer.server.port=8080"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

networks:
  web:
    driver: bridge
  internal:
    driver: bridge
    internal: true